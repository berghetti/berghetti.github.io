<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Programming on Mayco Blog</title><link>https://berghetti.github.io/categories/programming/</link><description>Recent content in Programming on Mayco Blog</description><generator>Hugo -- gohugo.io</generator><language>pt-br</language><lastBuildDate>Sun, 29 Dec 2024 13:31:52 -0400</lastBuildDate><atom:link href="https://berghetti.github.io/categories/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>User Interrupts</title><link>https://berghetti.github.io/posts/user_interrupts/</link><pubDate>Wed, 25 Dec 2024 18:23:00 +0000</pubDate><guid>https://berghetti.github.io/posts/user_interrupts/</guid><description>Whats Is User interrupts is a new processor feature that enables delivery of interrupts directly to user space, without kernel intervention 1. Let’s explore how it works.
How Works Tasks that want use user interrupts feature need setup some structures and MSR registers before. Here we not go see how to this feature is implemented in details in kernel linux, with all requirements for security, but go see the basic to this feature &amp;ldquo;works&amp;rdquo;.</description></item><item><title>O qualificador 'restrict' em C</title><link>https://berghetti.github.io/posts/restrict_keyword/</link><pubDate>Tue, 26 Sep 2023 18:23:03 -0400</pubDate><guid>https://berghetti.github.io/posts/restrict_keyword/</guid><description>Entendendo o uso O qualificador restrict diz ao compilador que um ponteiro não tem um aliasing, ou seja, não existe outro ponteiro que modifique o objeto 1. Por exemplo, uma função que possui a assinatura int f(int *a, int *b), os ponteiros a e b podem apontar para o mesmo objeto. O compilador tem que levar isso em consideração ao gerar o código.
Se sabemos que os ponteiros não apontam para o mesmo objeto, dizemos isso ao compilador usando a palavra-chave restrict.</description></item></channel></rss>